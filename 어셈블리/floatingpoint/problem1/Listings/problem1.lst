


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             PR1,CODE,READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000         Main
    5 00000000 E59F01E4        LDR              r0, Address1
    6 00000004 E59FA1E4        LDR              r10, =float1
    7 00000008 E59FB1E4        LDR              r11, =float2 ;Load Memory Addre
                                                            ss Value of Variabl
                                                            e
    8 0000000C E3A015FE        MOV              r1, #0x3F800000 ;it was not sav
                                                            ed as 7F800000 righ
                                                            t away
    9 00000010 E2811101        ADD              r1, r1, #0x40000000 ;so 3F80000
                                                            0 + 40000000
   10 00000014         
   11 00000014 E59A2000        LDR              r2,[r10]    ;Load float1
   12 00000018 E3520102        CMP              r2,#0x80000000 ;Conditions for 
                                                            checking the sign b
                                                            it
   13 0000001C 83A03001        MOVHI            r3, #1      ;Negative Number
   14 00000020 93A03000        MOVLS            r3, #0      ;Positive Number
   15 00000024         
   16 00000024 059B2000        LDREQ            r2, [r11]   ;(if float1 = #0x80
                                                            000000) special cas
                                                            e N1 = -0
   17 00000028 0A00006B        BEQ              ENDLINE2    ;go to ENDLINE2
   18 0000002C         
   19 0000002C E3520000        CMP              r2, #0x00000000 ;special case N
                                                            1 = +0
   20 00000030 059B2000        LDREQ            r2, [r11]   ;(if float1 = 0) r2
                                                             = float2
   21 00000034 0A000068        BEQ              ENDLINE2    ;go to ENDLINE2
   22 00000038         
   23 00000038 E1520001        CMP              r2, r1      ;special case N1_is
                                                            _Positive_Infinite 
                                                            number
   24 0000003C 0A000057        BEQ              N1_is_Positive_Infinite
   25 00000040         
   26 00000040         
   27 00000040 E3720502        CMP              r2, #0xFF800000 ;special case N
                                                            1_is_Negative_Infin
                                                            ite number
   28 00000044 0A000059        BEQ              N1_is_Negative_Infinite
   29 00000048         
   30 00000048         
   31 00000048 E1A02BE2        MOV              r2, r2, ROR#23 ;Rotation for Bi
                                                            t Clear
   32 0000004C E20240FF        BIC              r4, r2, #0xFFFFFF00 ;Bit Clear 
                                                            for Exponent
   33 00000050         
   34 00000050 E1A054A2        MOV              r5, r2, LSR#9 ;Shift by 9 to th
                                                            e right to obtain t
                                                            he Mantissa value
   35 00000054 E1A024E2        MOV              r2, r2, ROR#9 ;Restore original
                                                             values
   36 00000058         
   37 00000058 E59B6000        LDR              r6,[r11]    ;Load float2
   38 0000005C E3560102        CMP              r6,#0x80000000 ;Conditions for 
                                                            checking the sign b



ARM Macro Assembler    Page 2 


                                                            it
   39 00000060 83A07001        MOVHI            r7, #1      ;Negative Number
   40 00000064 93A07000        MOVLS            r7, #0      ;Positive Number
   41 00000068         
   42 00000068 059A2000        LDREQ            r2, [r10]   ;(if float1 = #0x80
                                                            000000) special cas
                                                            e N2 = -0
   43 0000006C 0A00005A        BEQ              ENDLINE2    ;go to ENDLINE2
   44 00000070         
   45 00000070 E3560000        CMP              r6, #0x00000000 ;special case N
                                                            2 = +0
   46 00000074 059A2000        LDREQ            r2, [r10]   ;(if float2 = 0) r2
                                                             = float1
   47 00000078 0A000057        BEQ              ENDLINE2    ;go to ENDLINE2
   48 0000007C         
   49 0000007C E1560001        CMP              r6, r1      ;special case N2_is
                                                            _Positive_Infinite 
                                                            number 
   50 00000080 0A00004E        BEQ              N2_is_Positive_Infinite
   51 00000084         
   52 00000084 E3760502        CMP              r6, #0xFF800000 ;special case N
                                                            2_is_Negative_Infin
                                                            ite number
   53 00000088 0A000050        BEQ              N2_is_Negative_Infinite
   54 0000008C         
   55 0000008C E1A06BE6        MOV              r6, r6, ROR#23 ;Rotation for Bi
                                                            t Clear
   56 00000090 E20680FF        BIC              r8, r6, #0xFFFFFF00 ;Bit Clear 
                                                            for Exponent
   57 00000094         
   58 00000094 E1A094A6        MOV              r9, r6, LSR#9 ;Shift by 9 to th
                                                            e right to obtain t
                                                            he Mantissa value
   59 00000098 E1A064E6        MOV              r6, r6, ROR#9 ;Restore original
                                                             values
   60 0000009C         
   61 0000009C E1530007        CMP              r3,r7
   62 000000A0 0A000000        BEQ              EQUAL
   63 000000A4 1A000017        BNE              NOTEQUAL
   64 000000A8         
   65 000000A8         EQUAL
   66 000000A8 E2855502        ADD              r5, r5, #0x00800000
   67 000000AC E2899502        ADD              r9, r9, #0x00800000 ;Attaching 
                                                            1 in front of Manti
                                                            ssa type
   68 000000B0         
   69 000000B0 E1540008        CMP              r4, r8      ;Comparing Exponent
                                                            
   70 000000B4 C044A008        SUBGT            r10, r4, r8
   71 000000B8 C244D07F        SUBGT            r13, r4, #0x0000007F
   72 000000BC         
   73 000000BC B048A004        SUBLT            r10, r8, r4 ;Subtract small Exp
                                                            onent value from la
                                                            rge Exponent
   74 000000C0 B248D07F        SUBLT            r13, r8, #0x0000007F ;Subtract 
                                                            127 from Exponent v
                                                            alue
   75 000000C4         
   76 000000C4 C1A0BA39        MOVGT            r11, r9, LSR r10



ARM Macro Assembler    Page 3 


   77 000000C8 B1A0BA35        MOVLT            r11, r5, LSR r10 ;Shift Mantiss
                                                            a to the right by t
                                                            he difference of Ex
                                                            ponent value
   78 000000CC         
   79 000000CC C085C00B        ADDGT            r12, r5, r11
   80 000000D0 B089C00B        ADDLT            r12, r9, r11 ;Add two Mantissa 
                                                            values with equal E
                                                            xponent values
   81 000000D4         
   82 000000D4 E35C0401        CMP              r12, #0x01000000 ;If Carry valu
                                                            e occurs(Normalize)
                                                            
   83 000000D8 21A0C0AC        MOVHS            r12, r12, LSR #1 ;Shift the Man
                                                            tissa value to the 
                                                            right by 1
   84 000000DC 228DD001        ADDHS            r13, r13, #1 ;Add 1 to the expo
                                                            nent value
   85 000000E0         
   86 000000E0 E3A02000        MOV              r2, #0      ;Initialize r2
   87 000000E4 E1A030E3        MOV              r3, r3, ROR#1
   88 000000E8 E0822003        ADD              r2, r2, r3  ;Addition after rot
                                                            ation to obtain sig
                                                            n bit
   89 000000EC E1A0C48C        MOV              r12, r12, LSL#9
   90 000000F0 E1A0C4AC        MOV              r12, r12, LSR#9
   91 000000F4 E082200C        ADD              r2, r2, r12 ;Extract Mantissa v
                                                            alue using Shift
   92 000000F8 E28DD07F        ADD              r13, r13, #0x000007F
   93 000000FC E1A0D4ED        MOV              r13, r13, ROR#9
   94 00000100 E082200D        ADD              r2, r2, r13 ;Add 127 to get Exp
                                                            onent value and ext
                                                            ract
   95 00000104         
   96 00000104 EA000034        B                ENDLINE2
   97 00000108         
   98 00000108         NOTEQUAL
   99 00000108 E1550009        CMP              r5, r9
  100 0000010C 83A01001        MOVHI            r1, #1
  101 00000110 93A01000        MOVLS            r1, #0      ;Compares absolute 
                                                            values and stores 0
                                                             or 1 in r1
  102 00000114         
  103 00000114 E2855502        ADD              r5, r5, #0x00800000
  104 00000118 E2899502        ADD              r9, r9, #0x00800000 ;Attaching 
                                                            1 in front of Manti
                                                            ssa type
  105 0000011C         
  106 0000011C E1550009        CMP              r5, r9      ;Comparing Mantissa
                                                            
  107 00000120 01540008        CMPEQ            r4, r8      ;Exponent compariso
                                                            n if equal
  108 00000124 03A02000        MOVEQ            r2, #0      ;Insert 0 to r2, if
                                                             equal
  109 00000128 0A00002B        BEQ              ENDLINE2    ;Go to ENDLINE2, if
                                                             equal
  110 0000012C         
  111 0000012C E1540008        CMP              r4, r8      ;Comparing Exponent
                                                            



ARM Macro Assembler    Page 4 


  112 00000130 C044A008        SUBGT            r10, r4, r8
  113 00000134 C244D07F        SUBGT            r13, r4, #0x0000007F
  114 00000138 D048A004        SUBLE            r10, r8, r4 ;Subtract small Exp
                                                            onent value from la
                                                            rge Exponent
  115 0000013C D248D07F        SUBLE            r13, r8, #0x0000007F ;Subtract 
                                                            127 from Exponent v
                                                            alue
  116 00000140         
  117 00000140 C1A09A39        MOVGT            r9, r9, LSR r10
  118 00000144 D1A05A35        MOVLE            r5, r5, LSR r10 ;Shift Mantissa
                                                             to the right by th
                                                            e difference of Exp
                                                            onent value
  119 00000148         
  120 00000148 E3510001        CMP              r1, #1
  121 0000014C 0045C009        SUBEQ            r12, r5, r9
  122 00000150 1049C005        SUBNE            r12, r9, r5 ;The absolute value
                                                             flag is used to su
                                                            btract a small valu
                                                            e from a large valu
                                                            e
  123 00000154         
  124 00000154         LOOP
  125 00000154 E35C0502        CMP              r12, #0x00800000 ;Condition for
                                                             Normalizing Mantis
                                                            sa Value
  126 00000158 91A0C08C        MOVLS            r12, r12, LSL #1 ;Shift the Man
                                                            tissa value to the 
                                                            left by 1
  127 0000015C 924DD001        SUBLS            r13, r13, #1 ;Subtract 1 to the
                                                             exponent value
  128 00000160 E35C0502        CMP              r12, #0x00800000 
                                                            ;r12 - 0x00800000
  129 00000164 3AFFFFFA        BLO              LOOP        ;If it is less than
                                                             0x00800000, go to 
                                                            LOOP
  130 00000168 2AFFFFFF        BHS              ENDLINE1    ;If it is greater t
                                                            han 0x00800000, go 
                                                            to ENDLINE
  131 0000016C         
  132 0000016C         ENDLINE1
  133 0000016C E3A02000        MOV              r2, #0      ;Initialize r2
  134 00000170 E3510001        CMP              r1, #1      ;Sign bit Checking
  135 00000174 01A030E3        MOVEQ            r3, r3, ROR#1
  136 00000178 11A070E7        MOVNE            r7, r7, ROR#1
  137 0000017C 00822003        ADDEQ            r2, r2, r3
  138 00000180 10822007        ADDNE            r2, r2, r7  ;Addition after rot
                                                            ation to obtain sig
                                                            n bit
  139 00000184 E1A0C48C        MOV              r12, r12, LSL#9
  140 00000188 E1A0C4AC        MOV              r12, r12, LSR#9
  141 0000018C E082200C        ADD              r2, r2, r12 ;Extract Mantissa v
                                                            alue using Shift
  142 00000190 E28DD07F        ADD              r13, r13, #0x000007F
  143 00000194 E1A0D4ED        MOV              r13, r13, ROR#9
  144 00000198 E082200D        ADD              r2, r2, r13 ;Add 127 to get Exp
                                                            onent value and ext
                                                            ract



ARM Macro Assembler    Page 5 


  145 0000019C EA00000E        B                ENDLINE2
  146 000001A0         
  147 000001A0         N1_is_Positive_Infinite
  148 000001A0 E59B6000        LDR              r6,[r11]    ;Load float2
  149 000001A4 E3760502        CMP              r6, #0xFF800000 ;special case N
                                                            2_is_Negative_Infin
                                                            ite number
  150 000001A8 03A02000        MOVEQ            r2, #0x00000000 ;+infinite +(-i
                                                            nfinie) = 0
  151 000001AC EA00000A        B                ENDLINE2    ;else case: +infini
                                                            te +- RealNumber = 
                                                            +infinite
  152 000001B0         ;and current value of r2 = +infinite => skip other condi
                       tions.
  153 000001B0         
  154 000001B0         N1_is_Negative_Infinite
  155 000001B0 E59B6000        LDR              r6,[r11]    ;Load float2
  156 000001B4 E1560001        CMP              r6, r1      ;special case N2_is
                                                            _Posititive_Infinit
                                                            e number
  157 000001B8 03A02000        MOVEQ            r2, #0x00000000 ;-infinite +inf
                                                            inite = 0
  158 000001BC EA000006        B                ENDLINE2    ;else case: -infini
                                                            te +- RealNumber = 
                                                            -infinite
  159 000001C0         ;and current value of r2 = +infinite => skip other condi
                       tions.
  160 000001C0         
  161 000001C0         N2_is_Positive_Infinite
  162 000001C0 E3720502        CMP              r2, #0xFF800000 ;special case N
                                                            1_is_Negetive_Infin
                                                            ite number
  163 000001C4 03A02000        MOVEQ            r2, #0x00000000 ;-infinite +inf
                                                            inite = 0
  164 000001C8 11A02001        MOVNE            r2, r1      ;else case: +-Real 
                                                            number + infinite =
                                                             +infinite
  165 000001CC EA000002        B                ENDLINE2    ;go to ENDLINE2
  166 000001D0         
  167 000001D0         N2_is_Negative_Infinite
  168 000001D0 E1520001        CMP              r2, r1      ;special case N1_is
                                                            _Posititive_Infinit
                                                            e number 
  169 000001D4 03A02000        MOVEQ            r2, #0x00000000 ;+infinite +(-i
                                                            nfinite) = 0
  170 000001D8 11A02006        MOVNE            r2, r6      ;else case: +-Real 
                                                            number +(-infinite)
                                                             = -infinite 
  171 000001DC         ;skip B ENDLINE2 (No need)
  172 000001DC         
  173 000001DC         ENDLINE2
  174 000001DC E5802000        STR              r2, [r0]    ;Store r2 value in 
                                                            the memory address 
                                                            value of r0
  175 000001E0 E1A0F00E        MOV              pc,lr
  176 000001E4         
  177 000001E4 3FC00000 
                       float1  &                0x3FC00000  ;0 01111111 100 000
                                                            0...



ARM Macro Assembler    Page 6 


  178 000001E8 40500000 
                       float2  &                0x40500000  ;0 10000000 101 000
                                                            0...
  179 000001EC 00040000 
                       Address1
                               DCD              &40000
  180 000001F0                 END
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\problem1.d -o.\objects\problem1.o -IC:\Keil_v5\ARM\RV31\INC 
-IC:\Keil_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISI
ON_VERSION SETA 529" --list=.\listings\problem1.lst problem1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

Address1 000001EC

Symbol: Address1
   Definitions
      At line 179 in file problem1.s
   Uses
      At line 5 in file problem1.s
Comment: Address1 used once
ENDLINE1 0000016C

Symbol: ENDLINE1
   Definitions
      At line 132 in file problem1.s
   Uses
      At line 130 in file problem1.s
Comment: ENDLINE1 used once
ENDLINE2 000001DC

Symbol: ENDLINE2
   Definitions
      At line 173 in file problem1.s
   Uses
      At line 17 in file problem1.s
      At line 21 in file problem1.s
      At line 43 in file problem1.s
      At line 47 in file problem1.s
      At line 96 in file problem1.s
      At line 109 in file problem1.s
      At line 145 in file problem1.s
      At line 151 in file problem1.s
      At line 158 in file problem1.s
      At line 165 in file problem1.s

EQUAL 000000A8

Symbol: EQUAL
   Definitions
      At line 65 in file problem1.s
   Uses
      At line 62 in file problem1.s
Comment: EQUAL used once
LOOP 00000154

Symbol: LOOP
   Definitions
      At line 124 in file problem1.s
   Uses
      At line 129 in file problem1.s
Comment: LOOP used once
Main 00000000

Symbol: Main
   Definitions
      At line 4 in file problem1.s
   Uses
      None
Comment: Main unused
N1_is_Negative_Infinite 000001B0




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: N1_is_Negative_Infinite
   Definitions
      At line 154 in file problem1.s
   Uses
      At line 28 in file problem1.s
Comment: N1_is_Negative_Infinite used once
N1_is_Positive_Infinite 000001A0

Symbol: N1_is_Positive_Infinite
   Definitions
      At line 147 in file problem1.s
   Uses
      At line 24 in file problem1.s
Comment: N1_is_Positive_Infinite used once
N2_is_Negative_Infinite 000001D0

Symbol: N2_is_Negative_Infinite
   Definitions
      At line 167 in file problem1.s
   Uses
      At line 53 in file problem1.s
Comment: N2_is_Negative_Infinite used once
N2_is_Positive_Infinite 000001C0

Symbol: N2_is_Positive_Infinite
   Definitions
      At line 161 in file problem1.s
   Uses
      At line 50 in file problem1.s
Comment: N2_is_Positive_Infinite used once
NOTEQUAL 00000108

Symbol: NOTEQUAL
   Definitions
      At line 98 in file problem1.s
   Uses
      At line 63 in file problem1.s
Comment: NOTEQUAL used once
PR1 00000000

Symbol: PR1
   Definitions
      At line 1 in file problem1.s
   Uses
      None
Comment: PR1 unused
float1 000001E4

Symbol: float1
   Definitions
      At line 177 in file problem1.s
   Uses
      At line 6 in file problem1.s
Comment: float1 used once
float2 000001E8

Symbol: float2
   Definitions
      At line 178 in file problem1.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 7 in file problem1.s
Comment: float2 used once
14 symbols
348 symbols in table
