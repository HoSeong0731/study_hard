


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             ARMex, CODE, READONLY
    2 00000000                 ENTRY
    3 00000000         
    4 00000000         Convolution_func
    5 00000000 E59FA2F4        LDR              r10, =Data_set ;Data_set
    6 00000004 E49A1004        LDR              r1, [r10], #4 
                                                            ;Convolution size 
    7 00000008 E49A0008        LDR              r0, [r10], #8 ;Stride size
    8 0000000C E49A2004        LDR              r2, [r10], #4 ;Matrix size
    9 00000010         
   10 00000010         
   11 00000010         ;================== Store Kernel AREA ==================
                       ===========================
   12 00000010         Store_Kernel_Data
   13 00000010 E59FB220        LDR              r11, Kernel_Data ;Kernel_Data
   14 00000014         
   15 00000014         Store_Loop1                          ;convolution size *
                                                             convolution size =
                                                             number of elements
                                                            
   16 00000014 E1510003        CMP              r1, r3
   17 00000018 DA000007        BLE              Store_Matrix_Data ;if(r1 <= r3)
                                                             => go to store_Mat
                                                            rix_Data == End of 
                                                            Kernel element Stor
                                                            age
   18 0000001C         
   19 0000001C         Store_Loop2
   20 0000001C         
   21 0000001C E49A9004        LDR              r9, [r10], #4 ;load
   22 00000020 E48B9004        STR              r9, [r11], #4 ;store
   23 00000024 E2844001        ADD              r4, r4, #1  ;r4++
   24 00000028 E1510004        CMP              r1, r4      ;
   25 0000002C CAFFFFFA        BGT              Store_Loop2 ;if(r1 > r4) => Loo
                                                            p2
   26 00000030         
   27 00000030 E3A04000        MOV              r4, #0      ;r4 = 0
   28 00000034 E2833001        ADD              r3, r3, #1  ;r3++
   29 00000038 EAFFFFF5        B                Store_Loop1 ;else => Loop1
   30 0000003C         
   31 0000003C         ;================== Store Matrix AREA ==================
                       ===========================
   32 0000003C         Store_Matrix_Data
   33 0000003C E59FC1F8        LDR              r12, Input_Data ;Input Data
   34 00000040 E3A03000        MOV              r3, #0      ;reset r3
   35 00000044 E3A09000        MOV              r9, #0      ;reset r9
   36 00000048         
   37 00000048         Store_Input_Loop1
   38 00000048 E1520003        CMP              r2, r3
   39 0000004C DA000007        BLE              Convolution ;if(r2 <= r3) => go
                                                             to Coonvolution ==
                                                             End of Input eleme
                                                            nt Storage
   40 00000050         
   41 00000050         Store_Input_Loop2                    ;Input size * input
                                                             size = number of e
                                                            lement
   42 00000050         
   43 00000050 E49A9004        LDR              r9, [r10], #4 ;Load



ARM Macro Assembler    Page 2 


   44 00000054 E48C9004        STR              r9, [r12], #4 ;Store
   45 00000058 E2844001        ADD              r4, r4, #1  ;r4++
   46 0000005C E1520004        CMP              r2, r4
   47 00000060 CAFFFFFA        BGT              Store_Input_Loop2 ;if(r2 > r4) 
                                                            => Loop2
   48 00000064         
   49 00000064 E3A04000        MOV              r4, #0      ;reset r4
   50 00000068 E2833001        ADD              r3, r3, #1  ;r3++
   51 0000006C EAFFFFF5        B                Store_Input_Loop1 
                                                            ;else => Loop1
   52 00000070         
   53 00000070         
   54 00000070         ;================== Convolution AREA ===================
                       ==========================
   55 00000070         Convolution                          ;reset register
   56 00000070 E3A03000        MOV              r3, #0
   57 00000074 E3A09000        MOV              r9, #0
   58 00000078 E3A0A000        MOV              r10, #0
   59 0000007C E59FB1B4        LDR              r11, Kernel_Data
   60 00000080 E59FC1B4        LDR              r12, Input_Data
   61 00000084 E59FA1B4        LDR              r10, Convolution_middle_result
   62 00000088         before_Loop1                         ;Initial Conditions
                                                             of Loop1
   63 00000088 E3A03000        MOV              r3, #0
   64 0000008C E0833001        ADD              r3, r3, r1
   65 00000090 E2433001        SUB              r3, r3, #1  ;matrix_size > heig
                                                            ht position + kerne
                                                            l_size -1
   66 00000094         Loop1
   67 00000094 E1520003        CMP              r2, r3
   68 00000098 CA000000        BGT              before_Loop2 ;if(matrix_size>he
                                                            ight position + ker
                                                            nel_size -1) => go 
                                                            to Loop2
   69 0000009C EA00001F        B                Calculation ;else go to Calcula
                                                            tion
   70 000000A0         before_Loop2                         ;Initial Conditions
                                                             of Loop2
   71 000000A0 E3A04000        MOV              r4, #0      ;reset r4
   72 000000A4 E0844001        ADD              r4, r4, r1  ;
   73 000000A8 E2444001        SUB              r4, r4, #1  ;matrix_size > widt
                                                            h position + kernel
                                                            _size -1;
   74 000000AC         Loop2
   75 000000AC E1520004        CMP              r2, r4      ;
   76 000000B0 CA000001        BGT              before_Loop3 ;if(matrix_size > 
                                                            width position + ke
                                                            rnel_size -1) => go
                                                             to Loop3
   77 000000B4 E0833000        ADD              r3, r3, r0  ;else height positi
                                                            on += stride
   78 000000B8 EAFFFFF5        B                Loop1       ;go to Loop1
   79 000000BC         
   80 000000BC         before_Loop3                         ;Initial Conditions
                                                             of Loop3
   81 000000BC E3A05000        MOV              r5, #0
   82 000000C0         Loop3
   83 000000C0 E1550001        CMP              r5, r1      ;
   84 000000C4 BA000002        BLT              before_Loop4 ;if(height positio



ARM Macro Assembler    Page 3 


                                                            n of kernel < kerne
                                                            l_size) => go to Lo
                                                            op4
   85 000000C8 E59FB168        LDR              r11, Kernel_Data ;set Kernel_po
                                                            int   
   86 000000CC E0844000        ADD              r4, r4, r0  ;else width positio
                                                            n++
   87 000000D0 EAFFFFF5        B                Loop2       ;go to Loop2
   88 000000D4         
   89 000000D4         before_Loop4                         ;Initial Conditions
                                                             of Loop4
   90 000000D4 E3A06001        MOV              r6, #1
   91 000000D8         
   92 000000D8         Loop4
   93 000000D8 E1560001        CMP              r6, r1
   94 000000DC         ;ADD r9, r9, #1
   95 000000DC         
   96 000000DC E49B7004        LDR              r7, [r11], #4 ;Load kernel Data
                                                            
   97 000000E0         
   98 000000E0 E0839005        ADD              r9, r3, r5  ;Calculate coordina
                                                            te values for Matri
                                                            x data start
   99 000000E4 E0499001        SUB              r9, r9, r1
  100 000000E8 E2899001        ADD              r9, r9, #1  ;x + i2 -stride - i
                                                             + 2
  101 000000EC         
  102 000000EC E0080299        MUL              r8, r9, r2  ;j(x + i2 -stride -
                                                             i + 2)
  103 000000F0         
  104 000000F0 E0889004        ADD              r9, r8, r4
  105 000000F4 E0499001        SUB              r9, r9, r1
  106 000000F8 E0899006        ADD              r9, r9, r6  ;j(x + i2 -stride -
                                                             i + 2) + j2 - stri
                                                            de - i + 2 - 1(beca
                                                            use start 1)  + y  
                                                                
  107 000000FC         ;Calculate coordinate values for Matrix data end
  108 000000FC E79C8109        LDR              r8, [r12, r9, LSL #2] 
                                                            ;Load Matrix Data
  109 00000100         
  110 00000100 E0090798        MUL              r9, r8, r7  ;kernel Data * Matr
                                                            ix Data
  111 00000104 E48A9004        STR              r9, [r10], #4 ;Store Convolutio
                                                            n Middle result
  112 00000108         
  113 00000108 E2866001        ADD              r6, r6, #1  ;Kernel++ of width 
                                                            position
  114 0000010C E3A09000        MOV              r9, #0      ;reset
  115 00000110 E3A08000        MOV              r8, #0      ;reset
  116 00000114 BAFFFFEF        BLT              Loop4       ;if(width position 
                                                            < kernel_size) => g
                                                            o to Loop4
  117 00000118 E2855001        ADD              r5, r5, #1  ;else height positi
                                                            on of kernel++
  118 0000011C EAFFFFE7        B                Loop3       ;go to Loop3
  119 00000120         
  120 00000120         Calculation
  121 00000120 E59FA118        LDR              r10, Convolution_middle_result 



ARM Macro Assembler    Page 4 


                                                            ;set register
  122 00000124 E59F3118        LDR              r3, Convolution_result
  123 00000128 E3A05001        MOV              r5, #1      ;condition count
  124 0000012C E0816000        ADD              r6, r1, r0
  125 00000130         Calculation_condition
  126 00000130 E1520006        CMP              r2, r6      ;input size = Convo
                                                            lution + (i-1)*stri
                                                            de
  127 00000134 E2855001        ADD              r5, r5, #1  ;i++
  128 00000138 E0866000        ADD              r6, r6, r0  ;next value += stri
                                                            ed
  129 0000013C 1AFFFFFB        BNE              Calculation_condition
  130 00000140 E0060595        MUL              r6, r5, r5  ;i = convolution re
                                                            sult size,  i*i = N
                                                            umber of elements i
                                                            n the Convolution M
                                                            iddle results / ker
                                                            nel size^2
  131 00000144         
  132 00000144 E0070191        MUL              r7, r1, r1  ;kernel size * kern
                                                            el size
  133 00000148 E3A08000        MOV              r8, #0
  134 0000014C E3A04000        MOV              r4, #0
  135 00000150         Calculation_Loop1
  136 00000150 E3560000        CMP              r6, #0
  137 00000154 CA000001        BGT              Calculation_Loop2
  138 00000158 E1A02005        MOV              r2, r5      ;r2 = Convolution r
                                                            esult size
  139 0000015C EA000009        B                Max_Pooling
  140 00000160         
  141 00000160         Calculation_Loop2
  142 00000160 E3570001        CMP              r7, #1
  143 00000164 E49A9004        LDR              r9, [r10], #4 ;Load Convolution
                                                             middle Data
  144 00000168 E0844009        ADD              r4, r4, r9  ;Repeat adding of k
                                                            ernel size^2 
  145 0000016C E2477001        SUB              r7, r7, #1  ;count++
  146 00000170 CAFFFFFA        BGT              Calculation_Loop2
  147 00000174 E4834004        STR              r4, [r3], #4 ;STR Convolution r
                                                            esult
  148 00000178 E2466001        SUB              r6, r6, #1  ;count++
  149 0000017C E3A04000        MOV              r4, #0      ;r4 reset
  150 00000180 E0070191        MUL              r7, r1, r1  ;r7 reset
  151 00000184 EAFFFFF1        B                Calculation_Loop1
  152 00000188         
  153 00000188         
  154 00000188         ;================== Multiplication AREA ================
                       =============================
  155 00000188         ;Radix2_of_Convolution_calculate
  156 00000188         ;   MOV r6, #31            ;count
  157 00000188         ;   MOV r10, #0            ;store result
  158 00000188         ;
  159 00000188         ;   
  160 00000188         ;multi                  ;matrix data = multiplicand, ker
                       nel data = multiplier
  161 00000188         ;   LDR r5, [r12]         ;load kernel data to r5
  162 00000188         ;   MOV r5, r5, LSL r6      
  163 00000188         ;   MOV r5, r5, LSR #31      ;r5 has[0]bit
  164 00000188         ;   CMP r6, #0            ;if count = 0



ARM Macro Assembler    Page 5 


  165 00000188         ;   SUB r6, r6, #1         ;r5 -= 1
  166 00000188         ;   MOVLT r6, #1         ;reset r6 for multilcation
  167 00000188         ;   MOVLT r7, #0         
  168 00000188         ;   BLT Radix_end
  169 00000188         ;   CMP R5, r7;            ;Compare x,x-1
  170 00000188         ;   BEQ Shift            ;case 00 or 11
  171 00000188         ;   BLT Add_Shift         ;case 01
  172 00000188         ;   BGT Sub_Shift         ;case 10
  173 00000188         ;Shift               ;Only shift at case 00 or 11
  174 00000188         ;   ASR r10, r10, #1   ;Shift at case 00 or 11
  175 00000188         ;   MOV r7, r5         ;Store r5 to r7 for comparing nex
                       t bit
  176 00000188         ;   B multi            ;Compare next bit
  177 00000188         ;Add_Shift                  ;add and shift case 01
  178 00000188         ;   ADD r10, r10, r9         ;Add A to r10
  179 00000188         ;   ASR r10, r10, #1         ;Shift
  180 00000188         ;   MOV r7, r5               ;Store r5 to r7 for compari
                       ng next bit
  181 00000188         ;   B multi                  ;Compare next bit
  182 00000188         ;Sub_Shift
  183 00000188         ;   SUB r10, r10, r9   ;Sub A from r10
  184 00000188         ;   ASR r10, r10, #1;   ;Shift
  185 00000188         ;   MOV r7, r5         ;Store r5 to r7 for comparing nex
                       t bit
  186 00000188         ;   B multi            ;Compare next bit
  187 00000188         ;Radix_end
  188 00000188         
  189 00000188         
  190 00000188         
  191 00000188         
  192 00000188         ;================== Max Pooling AREA Setting ===========
                       ==================================
  193 00000188         
  194 00000188         Max_Pooling                          ;r3 = Convolution_r
                                                            esult_data, r2 = in
                                                            put size - stride s
                                                            ize - kernel size +
                                                             2 => Convolution_r
                                                            esult_size
  195 00000188 E59F016C        LDR              r0, =Data_set
  196 0000018C E5901008        LDR              r1, [r0, #8]
  197 00000190 E59F30AC        LDR              r3, Convolution_result
  198 00000194 E59F00AC        LDR              r0, result
  199 00000198         
  200 00000198 E3A04000        MOV              r4, #0      ;count1
  201 0000019C E3A05000        MOV              r5, #0      ;count2
  202 000001A0 E3A06000        MOV              r6, #0      ;count3
  203 000001A4 E3A07000        MOV              r7, #0      ;count3
  204 000001A8 E3A08000        MOV              r8, #0
  205 000001AC E3A09000        MOV              r9, #0
  206 000001B0 E3A0A000        MOV              r10, #0
  207 000001B4 E3A0B000        MOV              r11, #0
  208 000001B8 E3A0C000        MOV              r12, #0
  209 000001BC         
  210 000001BC         ;================== Max Pooling AREA Calculation =======
                       ======================================
  211 000001BC         Max_Pooling_before_Loop1             ;Initial Conditions
                                                             of Loop1
  212 000001BC E3A04000        MOV              r4, #0



ARM Macro Assembler    Page 6 


  213 000001C0 E2699000        NEG              r9, r9
  214 000001C4         Max_Pooling_Loop1
  215 000001C4 E1520004        CMP              r2, r4
  216 000001C8 CA000000        BGT              Max_Pooling_before_Loop2 ;if (C
                                                            onvolution_result_s
                                                            ize > count1) go to
                                                             Loop2 
  217 000001CC EA000018        B                HO          ;else is finish!!!!
                                                            !!!!
  218 000001D0         Max_Pooling_before_Loop2             ;Initial Conditions
                                                             of Loop2
  219 000001D0 E3A05000        MOV              r5, #0
  220 000001D4         Max_Pooling_Loop2
  221 000001D4 E1520005        CMP              r2, r5
  222 000001D8 CA000001        BGT              Max_Pooling_before_Loop3 ;if (C
                                                            onvolution_result_s
                                                            ize > count2) go to
                                                             Loop3 
  223 000001DC         
  224 000001DC E0844001        ADD              r4, r4, r1  ;ADD r4 += Max Pool
                                                            ing size
  225 000001E0 EAFFFFF7        B                Max_Pooling_Loop1
  226 000001E4         Max_Pooling_before_Loop3             ;Initial Conditions
                                                             of Loop3
  227 000001E4 E3A06000        MOV              r6, #0
  228 000001E8         Max_Pooling_Loop3
  229 000001E8 E1510006        CMP              r1, r6
  230 000001EC CA000003        BGT              Max_Pooling_before_Loop4 ;if (M
                                                            ax Pooling size > c
                                                            ount3) go to Loop4
  231 000001F0 E4809004        STR              r9, [r0], #4 ;else Store
  232 000001F4 E3A09000        MOV              r9, #0      ;else reset
  233 000001F8 E0855001        ADD              r5, r5, r1  ;else r5 += Max Poo
                                                            ling size
  234 000001FC EAFFFFF4        B                Max_Pooling_Loop2 ;go to Loop2
  235 00000200         Max_Pooling_before_Loop4             ;Initial Conditions
                                                             of Loop4
  236 00000200 E3A07000        MOV              r7, #0
  237 00000204         Max_Pooling_Loop4
  238 00000204 E084B006        ADD              r11, r4, r6 ;Calculate position
                                                            
  239 00000208 E00A029B        MUL              r10, r11, r2
  240 0000020C E08AA005        ADD              r10, r10, r5
  241 00000210 E08AA007        ADD              r10, r10, r7 ;Calculate positio
                                                            n end
  242 00000214         
  243 00000214 E793810A        LDR              r8, [r3, r10, LSL #2] ;Load Con
                                                            volution result Dat
                                                            a
  244 00000218 E1580009        CMP              r8, r9
  245 0000021C C1A09008        MOVGT            r9, r8      ;if (r8> r9) r9 = r
                                                            8
  246 00000220         
  247 00000220 E2877001        ADD              r7, r7, #1  ;Count4++
  248 00000224 E1510007        CMP              r1, r7
  249 00000228 CAFFFFF5        BGT              Max_Pooling_Loop4 ;if (Max Pool
                                                            ing size > Count4) 
                                                            go to Loop4
  250 0000022C E2866001        ADD              r6, r6, #1  ;count3++



ARM Macro Assembler    Page 7 


  251 00000230 EAFFFFEC        B                Max_Pooling_Loop3 
                                                            ;else go to Loop3
  252 00000234         
  253 00000234         HO
  254 00000234 E3A0F000        MOV              pc, #0      ;Program end
  255 00000238         ;================== Address AREA =======================
                       ======================
  256 00000238         
  257 00000238 00006000 
                       Kernel_Data
                               DCD              0x00006000  ;Kernel Data
  258 0000023C         
  259 0000023C 00060000 
                       Input_Data
                               DCD              0x00060000  ;Matrix Data
  260 00000240         
  261 00000240 06000000 
                       Convolution_middle_result
                               DCD              0x06000000  ;Convolution middle
                                                             Address
  262 00000244         
  263 00000244 00600000 
                       Convolution_result
                               DCD              0x00600000  ;Convolution Result
                                                             Address
  264 00000248         
  265 00000248 60000000 
                       result  DCD              0x60000000  ;Max Pooling Result
                                                             Address
  266 0000024C         ;================== DATA AREA ==========================
                       ===================
  267 0000024C         Data_set
  268 0000024C 00000002        DCD              2
  269 00000250 00000002        DCD              2
  270 00000254 00000003        DCD              3
  271 00000258 00000006        DCD              6
  272 0000025C 0000006D        DCD              2_00000000000000000000000001101
101
  273 00000260 000000AA        DCD              2_00000000000000000000000010101
010
  274 00000264 00000091        DCD              2_00000000000000000000000010010
001
  275 00000268 0000006D        DCD              2_00000000000000000000000001101
101
  276 0000026C 0000072D        DCD              2_00000000000000000000011100101
101
  277 00000270 FFFFFFB7        DCD              2_11111111111111111111111110110
111
  278 00000274 00000151        DCD              2_00000000000000000000000101010
001
  279 00000278 FFFFFB1E        DCD              2_11111111111111111111101100011
110
  280 0000027C 00000520        DCD              2_00000000000000000000010100100
000
  281 00000280 FFFFFA80        DCD              2_11111111111111111111101010000
000
  282 00000284 FFFFF844        DCD              2_11111111111111111111100001000
100
  283 00000288 0000055D        DCD              2_00000000000000000000010101011



ARM Macro Assembler    Page 8 


101
  284 0000028C FFFFFA90        DCD              2_11111111111111111111101010010
000
  285 00000290 00000050        DCD              2_00000000000000000000000001010
000
  286 00000294 FFFFF958        DCD              2_11111111111111111111100101011
000
  287 00000298 FFFFFC8F        DCD              2_11111111111111111111110010001
111
  288 0000029C FFFFFCA5        DCD              2_11111111111111111111110010100
101
  289 000002A0 00000641        DCD              2_00000000000000000000011001000
001
  290 000002A4 FFFFFA04        DCD              2_11111111111111111111101000000
100
  291 000002A8 FFFFFBCA        DCD              2_11111111111111111111101111001
010
  292 000002AC FFFFFA4D        DCD              2_11111111111111111111101001001
101
  293 000002B0 00000491        DCD              2_00000000000000000000010010010
001
  294 000002B4 FFFFFB25        DCD              2_11111111111111111111101100100
101
  295 000002B8 FFFFFE04        DCD              2_11111111111111111111111000000
100
  296 000002BC FFFFFB84        DCD              2_11111111111111111111101110000
100
  297 000002C0 0000009D        DCD              2_00000000000000000000000010011
101
  298 000002C4 000003CD        DCD              2_00000000000000000000001111001
101
  299 000002C8 00000717        DCD              2_00000000000000000000011100010
111
  300 000002CC FFFFFC56        DCD              2_11111111111111111111110001010
110
  301 000002D0 FFFFF981        DCD              2_11111111111111111111100110000
001
  302 000002D4 FFFFFBFD        DCD              2_11111111111111111111101111111
101
  303 000002D8 FFFFFE49        DCD              2_11111111111111111111111001001
001
  304 000002DC 000002AB        DCD              2_00000000000000000000001010101
011
  305 000002E0 FFFFFE87        DCD              2_11111111111111111111111010000
111
  306 000002E4 FFFFFB19        DCD              2_11111111111111111111101100011
001
  307 000002E8 FFFFF95A        DCD              2_11111111111111111111100101011
010
  308 000002EC 00000440        DCD              2_00000000000000000000010001000
000
  309 000002F0 FFFFFAED        DCD              2_11111111111111111111101011101
101
  310 000002F4 00000253        DCD              2_00000000000000000000001001010
011
  311 000002F8 FFFFF8D5        DCD              2_11111111111111111111100011010
101
  312 000002FC         ;5C6FB
  313 000002FC                 END



ARM Macro Assembler    Page 9 


              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM9E --apcs=interwork 
--depend=.\objects\term.d -o.\objects\term.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Kei
l_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSI
ON SETA 529" --list=.\listings\term.lst term.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARMex 00000000

Symbol: ARMex
   Definitions
      At line 1 in file term.s
   Uses
      None
Comment: ARMex unused
Calculation 00000120

Symbol: Calculation
   Definitions
      At line 120 in file term.s
   Uses
      At line 69 in file term.s
Comment: Calculation used once
Calculation_Loop1 00000150

Symbol: Calculation_Loop1
   Definitions
      At line 135 in file term.s
   Uses
      At line 151 in file term.s
Comment: Calculation_Loop1 used once
Calculation_Loop2 00000160

Symbol: Calculation_Loop2
   Definitions
      At line 141 in file term.s
   Uses
      At line 137 in file term.s
      At line 146 in file term.s

Calculation_condition 00000130

Symbol: Calculation_condition
   Definitions
      At line 125 in file term.s
   Uses
      At line 129 in file term.s
Comment: Calculation_condition used once
Convolution 00000070

Symbol: Convolution
   Definitions
      At line 55 in file term.s
   Uses
      At line 39 in file term.s
Comment: Convolution used once
Convolution_func 00000000

Symbol: Convolution_func
   Definitions
      At line 4 in file term.s
   Uses
      None
Comment: Convolution_func unused
Convolution_middle_result 00000240




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: Convolution_middle_result
   Definitions
      At line 261 in file term.s
   Uses
      At line 61 in file term.s
      At line 121 in file term.s

Convolution_result 00000244

Symbol: Convolution_result
   Definitions
      At line 263 in file term.s
   Uses
      At line 122 in file term.s
      At line 197 in file term.s

Data_set 0000024C

Symbol: Data_set
   Definitions
      At line 267 in file term.s
   Uses
      At line 5 in file term.s
      At line 195 in file term.s

HO 00000234

Symbol: HO
   Definitions
      At line 253 in file term.s
   Uses
      At line 217 in file term.s
Comment: HO used once
Input_Data 0000023C

Symbol: Input_Data
   Definitions
      At line 259 in file term.s
   Uses
      At line 33 in file term.s
      At line 60 in file term.s

Kernel_Data 00000238

Symbol: Kernel_Data
   Definitions
      At line 257 in file term.s
   Uses
      At line 13 in file term.s
      At line 59 in file term.s
      At line 85 in file term.s

Loop1 00000094

Symbol: Loop1
   Definitions
      At line 66 in file term.s
   Uses
      At line 78 in file term.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: Loop1 used once
Loop2 000000AC

Symbol: Loop2
   Definitions
      At line 74 in file term.s
   Uses
      At line 87 in file term.s
Comment: Loop2 used once
Loop3 000000C0

Symbol: Loop3
   Definitions
      At line 82 in file term.s
   Uses
      At line 118 in file term.s
Comment: Loop3 used once
Loop4 000000D8

Symbol: Loop4
   Definitions
      At line 92 in file term.s
   Uses
      At line 116 in file term.s
Comment: Loop4 used once
Max_Pooling 00000188

Symbol: Max_Pooling
   Definitions
      At line 194 in file term.s
   Uses
      At line 139 in file term.s
Comment: Max_Pooling used once
Max_Pooling_Loop1 000001C4

Symbol: Max_Pooling_Loop1
   Definitions
      At line 214 in file term.s
   Uses
      At line 225 in file term.s
Comment: Max_Pooling_Loop1 used once
Max_Pooling_Loop2 000001D4

Symbol: Max_Pooling_Loop2
   Definitions
      At line 220 in file term.s
   Uses
      At line 234 in file term.s
Comment: Max_Pooling_Loop2 used once
Max_Pooling_Loop3 000001E8

Symbol: Max_Pooling_Loop3
   Definitions
      At line 228 in file term.s
   Uses
      At line 251 in file term.s
Comment: Max_Pooling_Loop3 used once
Max_Pooling_Loop4 00000204




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: Max_Pooling_Loop4
   Definitions
      At line 237 in file term.s
   Uses
      At line 249 in file term.s
Comment: Max_Pooling_Loop4 used once
Max_Pooling_before_Loop1 000001BC

Symbol: Max_Pooling_before_Loop1
   Definitions
      At line 211 in file term.s
   Uses
      None
Comment: Max_Pooling_before_Loop1 unused
Max_Pooling_before_Loop2 000001D0

Symbol: Max_Pooling_before_Loop2
   Definitions
      At line 218 in file term.s
   Uses
      At line 216 in file term.s
Comment: Max_Pooling_before_Loop2 used once
Max_Pooling_before_Loop3 000001E4

Symbol: Max_Pooling_before_Loop3
   Definitions
      At line 226 in file term.s
   Uses
      At line 222 in file term.s
Comment: Max_Pooling_before_Loop3 used once
Max_Pooling_before_Loop4 00000200

Symbol: Max_Pooling_before_Loop4
   Definitions
      At line 235 in file term.s
   Uses
      At line 230 in file term.s
Comment: Max_Pooling_before_Loop4 used once
Store_Input_Loop1 00000048

Symbol: Store_Input_Loop1
   Definitions
      At line 37 in file term.s
   Uses
      At line 51 in file term.s
Comment: Store_Input_Loop1 used once
Store_Input_Loop2 00000050

Symbol: Store_Input_Loop2
   Definitions
      At line 41 in file term.s
   Uses
      At line 47 in file term.s
Comment: Store_Input_Loop2 used once
Store_Kernel_Data 00000010

Symbol: Store_Kernel_Data
   Definitions
      At line 12 in file term.s



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Uses
      None
Comment: Store_Kernel_Data unused
Store_Loop1 00000014

Symbol: Store_Loop1
   Definitions
      At line 15 in file term.s
   Uses
      At line 29 in file term.s
Comment: Store_Loop1 used once
Store_Loop2 0000001C

Symbol: Store_Loop2
   Definitions
      At line 19 in file term.s
   Uses
      At line 25 in file term.s
Comment: Store_Loop2 used once
Store_Matrix_Data 0000003C

Symbol: Store_Matrix_Data
   Definitions
      At line 32 in file term.s
   Uses
      At line 17 in file term.s
Comment: Store_Matrix_Data used once
before_Loop1 00000088

Symbol: before_Loop1
   Definitions
      At line 62 in file term.s
   Uses
      None
Comment: before_Loop1 unused
before_Loop2 000000A0

Symbol: before_Loop2
   Definitions
      At line 70 in file term.s
   Uses
      At line 68 in file term.s
Comment: before_Loop2 used once
before_Loop3 000000BC

Symbol: before_Loop3
   Definitions
      At line 80 in file term.s
   Uses
      At line 76 in file term.s
Comment: before_Loop3 used once
before_Loop4 000000D4

Symbol: before_Loop4
   Definitions
      At line 89 in file term.s
   Uses
      At line 84 in file term.s
Comment: before_Loop4 used once



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

result 00000248

Symbol: result
   Definitions
      At line 265 in file term.s
   Uses
      At line 198 in file term.s
Comment: result used once
37 symbols
371 symbols in table
